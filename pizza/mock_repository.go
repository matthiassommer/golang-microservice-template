// Code generated by mockery v1.0.0. DO NOT EDIT.

package pizza

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: name
func (_m *MockRepository) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *MockRepository) FindAll() ([]*Pizza, error) {
	ret := _m.Called()

	var r0 []*Pizza
	if rf, ok := ret.Get(0).(func() []*Pizza); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Pizza)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *MockRepository) FindByName(name string) (*Pizza, error) {
	ret := _m.Called(name)

	var r0 *Pizza
	if rf, ok := ret.Get(0).(func(string) *Pizza); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pizza)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: pizza
func (_m *MockRepository) Save(pizza *Pizza) (*Pizza, error) {
	ret := _m.Called(pizza)

	var r0 *Pizza
	if rf, ok := ret.Get(0).(func(*Pizza) *Pizza); ok {
		r0 = rf(pizza)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pizza)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Pizza) error); ok {
		r1 = rf(pizza)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: pizza
func (_m *MockRepository) Update(pizza *Pizza) (*Pizza, error) {
	ret := _m.Called(pizza)

	var r0 *Pizza
	if rf, ok := ret.Get(0).(func(*Pizza) *Pizza); ok {
		r0 = rf(pizza)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pizza)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Pizza) error); ok {
		r1 = rf(pizza)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
